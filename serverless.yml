service: sound-bytes

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: arn:aws:s3:::sound-bytes-bites/*
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:*:*:table/sound-bytes-bites-metadata
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:*:*:table/sound-bytes-auth
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:*:*:table/sound-bytes-users

# you can define service wide environment variables here
environment:
  stage: ${opt:stage, 'dev'}

# you can add packaging information here
package:
  exclude:
    - LICENSE
    - CONTRIBUTORS.md
    - SoundsBytesApplication/**
    - test.mp3
    - test.mp3.base64
  include:
    - handler.py
    - six.py
    - argon2/**
    - cffi/**
    - pycparser/**
    - tinytag/**

functions:
  upload-bite:
    handler: handler.upload_bite
    events:
      - http:
          path: upload-bite
          method: post
  login:
    handler: handler.login
    events:
      - http:
          path: auth
          method: post
  create-account:
    handler: handler.create_account
    events:
      - http:
          path: create-account
          method: post
  refresh-token:
    handler: handler.refresh_client
    events:
      - http:
          path: refresh-token
          method: post
  verify-email:
    handler: handler.verify_email
    events:
      - http:
          path: verify
          method: post
  get-bites:
    handler: handler.get_bites
    events:
      - http:
          path: get-bites
          method: get

# you can add CloudFormation resource templates here
resources:
  Resources:
   S3Bucket:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: sound-bytes-bites
   DynamoDBTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: sound-bytes-bites-metadata
       AttributeDefinitions:
          - AttributeName: BiteId
            AttributeType: S
       KeySchema:
          - AttributeName: BiteId
            KeyType: HASH
       ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
   DynamoDBTableAuth:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: sound-bytes-auth
       AttributeDefinitions:
          - AttributeName: ClientId
            AttributeType: S
       KeySchema:
          - AttributeName: ClientId
            KeyType: HASH
       ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
   DynamoDBTableUsers:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: sound-bytes-users
       AttributeDefinitions:
          - AttributeName: Username
            AttributeType: S
       KeySchema:
          - AttributeName: Username
            KeyType: HASH
       ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
