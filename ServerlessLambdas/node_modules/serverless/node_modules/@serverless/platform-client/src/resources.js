/*
 * SERVERLESS PLATFORM SDK: RESOURCES
 */

const utils = require('./utils')

/**
 * Get the Serverless Platform User Account
 */
const getUser = async (sdk) => {
  let endpoint = `${sdk.getDomain('core')}/core/me`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `GET`
  })
}

/**
 * Get the Serverless Platform User Account Meta information
 */
const getUserMeta = async (sdk) => {
  let endpoint = `${sdk.getDomain('core')}/core/users/meta`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `GET`
  })
}

/**
 * Create/Update the Serverless Platform User Account Meta information
 */
const saveUserMeta = async (sdk, newMeta = {}) => {

  let existingMeta = await getUserMeta(sdk)

  newMeta = Object.assign(existingMeta || {}, newMeta)

  let endpoint = `${sdk.getDomain('core')}/core/users/meta`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `POST`,
    data: newMeta,
  })
}

/**
 * Validate User and Organization name
 */
const validateUserAndOrgName = async (sdk, userAndOrgName) => {

  let endpoint = `${sdk.getDomain('core')}/core/validate/tenants`

  const res = await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `POST`,
    data: {
      ownerUserName: userAndOrgName,
      title: userAndOrgName,
      tenantName: userAndOrgName,
    },
  })

  if (res && res.validationErrors && res.validationErrors.length) {
    return res.validationErrors
  }

  return null
}

/**
 * Create a User and Organization
 */
const createUserAndOrg = async (sdk, userAndOrgName) => {
  return await createOrg(sdk, userAndOrgName)
}

/**
 * Create Organization
 */
const createOrg = async (sdk, userAndOrgName) => {

  let endpoint = `${sdk.getDomain('core')}/core/tenants`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `POST`,
    data: {
      ownerUserName: userAndOrgName,
      title: userAndOrgName,
      tenantName: userAndOrgName,
    },
  })
}

/**
 * Get Organization By Name
 */
const getOrgByName = async (sdk, orgName) => {

  let endpoint = `${sdk.getDomain('core')}/core/tenants/${orgName}`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `GET`
  })
}

/**
 * List Organizations By User
 */
const listOrgs = async (sdk, username) => {

  let endpoint = `${sdk.getDomain('core')}/core/tenants?userName=${username}`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `GET`
  })
}

/**
 * Create An Application
 */
const createApp = async (sdk, orgName = null, app = {}) => {

  let endpoint = `${sdk.getDomain('core')}/core/tenants/${orgName}/applications`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `POST`,
    data: {
      tenantName: orgName,
      appName: app.name,
      title: app.name,
      description: app.description,
      deploymentProfiles: app.deploymentProfiles,
    }
  })
}

/**
 * Update An Application
 */
const updateApp = async (sdk, orgName = null, app = {}) => {

  let endpoint = `${sdk.getDomain('core')}/core/tenants/${orgName}/applications/${app.name}`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `PATCH`,
    data: {
      appName: app.name,
      title: app.name,
      description: app.description,
      deploymentProfiles: app.deploymentProfiles,
    }
  })
}

/**
 * Delete An Application
 */
const deleteApp = async (sdk, orgName = null, appName = null) => {

  let endpoint = `${sdk.getDomain('core')}/core/tenants/${orgName}/applications/${appName}`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `DELETE`,
  })
}

/**
 * List Applications in an Organization
 */
const listApps = async (sdk, orgName = null) => {

  let endpoint = `${sdk.getDomain('core')}/core/tenants/${orgName}/applications`

  return await utils.request({
    accessKey: sdk.accessKey,
    endpoint,
    method: `GET`,
  })
}

module.exports = {
  getUser,
  getUserMeta,
  saveUserMeta,
  validateUserAndOrgName,
  createUserAndOrg,
  createOrg,
  getOrgByName,
  listOrgs,
  createApp,
  updateApp,
  deleteApp,
  listApps,
}
