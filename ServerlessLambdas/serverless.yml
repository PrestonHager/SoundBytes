org: prestonhager
app: soundbytes
service: soundbytes

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

  httpApi:
    authorizers:
      # myAuthorizer:
      #   type: token
      #   functionName: authorizer
      #   identitySource:
      #     - $request.header.Auth
      #     - $request.header.Authorization

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource: arn:aws:s3:::soundbytes-bites/*
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:*:*:table/soundbytes-bites-metadata
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:*:*:table/soundbytes-users
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:*:*:table/soundbytes-verify

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  patterns:
    - '!requirements/**'
    - '!node_modules/**'
    - '!Dockerfile'
 # include:
 #   - include-me.py
 #   - include-me-dir/**
 # exclude:
 #   - exclude-me.py
 #   - exclude-me-dir/**

functions:
  authorizer:
    handler: authorizer.run
    layers:
      - Ref: PythonRequirementsLambdaLayer
  get-bites:
    handler: get_bites.run
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: get-bites
          method: get
          authorizer:
            name: authorizer
  verify-email:
    handler: verify_email.run
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: verify/{link_id}
          method: get
  auth:
    handler: auth.run
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: login
          method: post
  create-account:
    handler: create_account.run
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: create-account
          method: post
  upload-bite:
    handler: upload_bite.run
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: upload-bite
          method: post
          authorizer:
            name: authorizer

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
   # S3Bucket:
   #   Type: AWS::S3::Bucket
   #   Properties:
   #     BucketName: soundbytes-bites
   DynamoDBTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: soundbytes-bites-metadata
       AttributeDefinitions:
          - AttributeName: BiteId
            AttributeType: S
       KeySchema:
          - AttributeName: BiteId
            KeyType: HASH
       ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
   DynamoDBTableUsers:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: soundbytes-users
       AttributeDefinitions:
          - AttributeName: Username
            AttributeType: S
       KeySchema:
          - AttributeName: Username
            KeyType: HASH
       ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
   DynamoDBTableVerify:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: soundbytes-verify
       AttributeDefinitions:
         - AttributeName: LinkId
           AttributeType: S
       KeySchema:
         - AttributeName: LinkId
           KeyType: HASH
       ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

# Custom Plugin
plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-offline
custom:
  serverless-offline:
    noPrependStageInUrl: 1
  customDomain:
    domainName: api.soundbytes.xyz
    basePath: ''
    stage: ${self:provider.stage}
    certificateName: 'soundbytes.xyz'
    createRoute53Record: false
  pythonRequirements:
    dockerizePip: true
    layer: true
    dockerImage: image.img
    # dockerFile: Dockerfile
